// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.4.0

//# unitInfo: Provides: Definicije
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Definicije = [0];
   runtime.caml_register_global(0, Definicije, "Definicije");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Definicije__Sklad
//# unitInfo: Requires: Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Sklad_je_prazen$1 = "Sklad je prazen";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    cst_Sklad_je_prazen$0 = cst_Sklad_je_prazen$1,
    cst_Sklad_je_prazen = cst_Sklad_je_prazen$1,
    prazen_sklad = 0;
   function je_prazen(sklad){return sklad ? 0 : 1;}
   function dodaj(element, sklad){return [0, element, sklad];}
   function odstrani(sklad){
    if(! sklad) return caml_call1(Stdlib[2], cst_Sklad_je_prazen);
    var xs = sklad[2];
    return xs;
   }
   function vrh(sklad){
    if(! sklad) return caml_call1(Stdlib[2], cst_Sklad_je_prazen$0);
    var x = sklad[1];
    return x;
   }
   var Definicije_Sklad = [0, prazen_sklad, je_prazen, dodaj, odstrani, vrh];
   runtime.caml_register_global(3, Definicije_Sklad, "Definicije__Sklad");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Definicije__Stanje
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function iz_niza(oznaka){return [0, oznaka];}
   function v_niz(param){var oznaka = param[1]; return oznaka;}
   var Definicije_Stanje = [0, iz_niza, v_niz];
   runtime.caml_register_global(0, Definicije_Stanje, "Definicije__Stanje");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Definicije__Avtomat
//# unitInfo: Requires: Definicije__Sklad, Definicije__Stanje, Stdlib, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_q1$1 = "q1",
    cst_q2$1 = "q2",
    cst_q3$1 = "q3";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    Definicije_Sklad = global_data.Definicije__Sklad,
    Definicije_Stanje = global_data.Definicije__Stanje,
    Stdlib = global_data.Stdlib,
    cst_q3 = cst_q3$1,
    cst_q2 = cst_q2$1,
    cst_q1 = cst_q1$1,
    cst_Podan_znak_ni_zaklepaj = "Podan znak ni zaklepaj",
    cst_q0 = "q0",
    cst_q1$0 = cst_q1$1,
    cst_q2$0 = cst_q2$1,
    cst_q3$0 = cst_q3$1;
   function prazen_avtomat(zacetno_stanje){
    return [0,
            [0, zacetno_stanje, 0],
            zacetno_stanje,
            0,
            0,
            Definicije_Sklad[1]];
   }
   function dodaj_nesprejemno_stanje(stanje, avtomat){
    return [0,
            [0, stanje, avtomat[1]],
            avtomat[2],
            avtomat[3],
            avtomat[4],
            avtomat[5]];
   }
   function dodaj_sprejemno_stanje(stanje, avtomat){
    return [0,
            [0, stanje, avtomat[1]],
            avtomat[2],
            [0, stanje, avtomat[3]],
            avtomat[4],
            avtomat[5]];
   }
   function dodaj_prehod(stanje1, znak, stanje2, avtomat){
    return [0,
            avtomat[1],
            avtomat[2],
            avtomat[3],
            [0, [0, stanje1, znak, stanje2], avtomat[4]],
            avtomat[5]];
   }
   function prehodna_funkcija(avtomat, sklad, stanje, zaprt_oklepaj){
    var _a_ = avtomat[4];
    function _b_(param){
     var
      znak = param[2],
      stanje1 = param[1],
      _h_ = runtime.caml_equal(stanje1, stanje),
      _i_ = _h_ ? zaprt_oklepaj === znak ? 1 : 0 : _h_;
     return _i_;
    }
    var match = caml_call2(Stdlib_List[39], _b_, _a_);
    if(! match) return 0;
    var stanje2 = match[1][3], switch$0 = 0;
    if(91 <= zaprt_oklepaj){
     if(123 <= zaprt_oklepaj){
      if(126 > zaprt_oklepaj)
       switch(zaprt_oklepaj - 123 | 0){
         case 0:
          switch$0 = 1; break;
         case 1: break;
         default: switch$0 = 2;
       }
     }
     else if(94 > zaprt_oklepaj)
      switch(zaprt_oklepaj - 91 | 0){
        case 0:
         switch$0 = 1; break;
        case 1: break;
        default: switch$0 = 2;
      }
    }
    else if(40 === zaprt_oklepaj)
     switch$0 = 1;
    else if(41 === zaprt_oklepaj) switch$0 = 2;
    switch(switch$0){
      case 0:
       return 0;
      case 1:
       return [0,
               [0,
                stanje2,
                caml_call2(Definicije_Sklad[3], zaprt_oklepaj, sklad)]];
      default:
       if
        (!
         caml_call1(Definicije_Sklad[2], sklad)
         &&
          !
          runtime.caml_string_equal
           (caml_call1(Definicije_Stanje[2], stanje), cst_q3$1)){
        var
         _c_ =
           41 === zaprt_oklepaj
            ? 40
            : 93
              === zaprt_oklepaj
              ? 91
              : 125
                === zaprt_oklepaj
                ? 123
                : caml_call1(Stdlib[2], cst_Podan_znak_ni_zaklepaj);
        if(caml_call1(Definicije_Sklad[5], sklad) === _c_){
         var _d_ = caml_call1(Definicije_Sklad[4], sklad);
         if(caml_call1(Definicije_Sklad[2], _d_))
          var
           _e_ = caml_call1(Definicije_Sklad[4], sklad),
           _f_ = [0, caml_call1(Definicije_Stanje[1], cst_q2), _e_];
         else
          var
           _g_ = caml_call1(Definicije_Sklad[4], sklad),
           _f_ = [0, caml_call1(Definicije_Stanje[1], cst_q1), _g_];
         return [0, _f_];
        }
       }
       return [0, [0, caml_call1(Definicije_Stanje[1], cst_q3), sklad]];
    }
   }
   function zacetno_stanje(avtomat){return avtomat[2];}
   function seznam_stanj(avtomat){return avtomat[1];}
   function seznam_prehodov(avtomat){return avtomat[4];}
   function je_sprejemno_stanje(avtomat, stanje){
    return caml_call2(Stdlib_List[36], stanje, avtomat[3]);
   }
   var
    q0 = caml_call1(Definicije_Stanje[1], cst_q0),
    q1 = caml_call1(Definicije_Stanje[1], cst_q1$0),
    q2 = caml_call1(Definicije_Stanje[1], cst_q2$0),
    q3 = caml_call1(Definicije_Stanje[1], cst_q3$0),
    oklepaji =
      dodaj_prehod
       (q3,
        123,
        q3,
        dodaj_prehod
         (q3,
          125,
          q3,
          dodaj_prehod
           (q2,
            125,
            q3,
            dodaj_prehod
             (q2,
              123,
              q1,
              dodaj_prehod
               (q1,
                125,
                q2,
                dodaj_prehod
                 (q1,
                  125,
                  q1,
                  dodaj_prehod
                   (q1,
                    123,
                    q1,
                    dodaj_prehod
                     (q0,
                      125,
                      q3,
                      dodaj_prehod
                       (q0,
                        123,
                        q1,
                        dodaj_prehod
                         (q3,
                          91,
                          q3,
                          dodaj_prehod
                           (q3,
                            93,
                            q3,
                            dodaj_prehod
                             (q2,
                              93,
                              q3,
                              dodaj_prehod
                               (q2,
                                91,
                                q1,
                                dodaj_prehod
                                 (q1,
                                  93,
                                  q2,
                                  dodaj_prehod
                                   (q1,
                                    93,
                                    q1,
                                    dodaj_prehod
                                     (q1,
                                      91,
                                      q1,
                                      dodaj_prehod
                                       (q0,
                                        93,
                                        q3,
                                        dodaj_prehod
                                         (q0,
                                          91,
                                          q1,
                                          dodaj_prehod
                                           (q3,
                                            40,
                                            q3,
                                            dodaj_prehod
                                             (q3,
                                              41,
                                              q3,
                                              dodaj_prehod
                                               (q2,
                                                41,
                                                q3,
                                                dodaj_prehod
                                                 (q2,
                                                  40,
                                                  q1,
                                                  dodaj_prehod
                                                   (q1,
                                                    41,
                                                    q2,
                                                    dodaj_prehod
                                                     (q1,
                                                      41,
                                                      q1,
                                                      dodaj_prehod
                                                       (q1,
                                                        40,
                                                        q1,
                                                        dodaj_prehod
                                                         (q0,
                                                          41,
                                                          q3,
                                                          dodaj_prehod
                                                           (q0,
                                                            40,
                                                            q1,
                                                            dodaj_nesprejemno_stanje
                                                             (q3,
                                                              dodaj_nesprejemno_stanje
                                                               (q1, dodaj_sprejemno_stanje(q2, prazen_avtomat(q0))))))))))))))))))))))))))))))),
    Definicije_Avtomat =
      [0,
       prazen_avtomat,
       dodaj_nesprejemno_stanje,
       dodaj_sprejemno_stanje,
       dodaj_prehod,
       prehodna_funkcija,
       zacetno_stanje,
       seznam_stanj,
       seznam_prehodov,
       je_sprejemno_stanje,
       oklepaji];
   runtime.caml_register_global(13, Definicije_Avtomat, "Definicije__Avtomat");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Definicije__Trak
//# unitInfo: Requires: Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_String = global_data.Stdlib__String;
   function trenutni_znak(trak){
    return runtime.caml_string_get(trak[1], trak[2]);
   }
   function je_na_koncu(trak){
    return caml_ml_string_length(trak[1]) === trak[2] ? 1 : 0;
   }
   function premakni_naprej(trak){return [0, trak[1], trak[2] + 1 | 0];}
   function iz_niza(niz){return [0, niz, 0];}
   var prazen = iz_niza(cst);
   function v_niz(trak){return trak[1];}
   function prebrani(trak){
    return caml_call3(Stdlib_String[15], trak[1], 0, trak[2]);
   }
   function neprebrani(trak){
    return caml_call3
            (Stdlib_String[15],
             trak[1],
             trak[2],
             caml_ml_string_length(trak[1]) - trak[2] | 0);
   }
   var
    Definicije_Trak =
      [0,
       prazen,
       trenutni_znak,
       je_na_koncu,
       premakni_naprej,
       iz_niza,
       v_niz,
       prebrani,
       neprebrani];
   runtime.caml_register_global(2, Definicije_Trak, "Definicije__Trak");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Definicije__ZagnaniAvtomat
//# unitInfo: Requires: Definicije__Avtomat, Definicije__Sklad, Definicije__Trak
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Definicije_Avtomat = global_data.Definicije__Avtomat,
    Definicije_Trak = global_data.Definicije__Trak,
    Definicije_Sklad = global_data.Definicije__Sklad;
   function pozeni(avtomat, trak){
    var _b_ = Definicije_Sklad[1];
    return [0, avtomat, trak, caml_call1(Definicije_Avtomat[6], avtomat), _b_];
   }
   function avtomat(param){var avtomat = param[1]; return avtomat;}
   function trak(param){var trak = param[2]; return trak;}
   function stanje(param){var stanje = param[3]; return stanje;}
   function korak_naprej(param){
    var
     sklad = param[4],
     stanje = param[3],
     trak = param[2],
     avtomat = param[1];
    if(caml_call1(Definicije_Trak[3], trak)) return 0;
    var
     _a_ = caml_call1(Definicije_Trak[2], trak),
     stanje$0 = caml_call4(Definicije_Avtomat[5], avtomat, sklad, stanje, _a_);
    if(! stanje$0) return 0;
    var match = stanje$0[1], nov_sklad = match[2], novo_stanje = match[1];
    return [0,
            [0,
             avtomat,
             caml_call1(Definicije_Trak[4], trak),
             novo_stanje,
             nov_sklad]];
   }
   function je_v_sprejemnem_stanju(param){
    var stanje = param[3], avtomat = param[1];
    return caml_call2(Definicije_Avtomat[9], avtomat, stanje);
   }
   var
    Definicije_ZagnaniAvtomat =
      [0, pozeni, avtomat, trak, stanje, korak_naprej, je_v_sprejemnem_stanju];
   runtime.caml_register_global
    (3, Definicije_ZagnaniAvtomat, "Definicije__ZagnaniAvtomat");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
